export const challenges = [
	{
		id: 0,
		name: "Panic Function",
		descriptions: [
			"Write a PANIC! function. The function should take in a sentence and return the same sentence in all caps with an exclamation point (!) at the end. Use JavaScript's built in string methods. ",
			"If the string is a phrase or sentence, add a üò± emoji in between each word",
		],
		examples: [
			"Example input: 'Hello",
			"Example output: 'HELLO!'",
			"Example input: 'I'm almost out of coffee'",
			"Example output: 'I'M üò± ALMOST üò± OUT üò± OF üò± COFFEE!'",
		],
		tester: [
			"console.log(panic('I'm almost out of coffee')); ",
			"console.log(panic('winter is coming'))",
		],
		methods: [".split()", " .join ()"],
		explanations: [],
		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/panic.js",
	},
	{
		id: 1,
		name: "Whispering",
		descriptions: [
			"Write a function `whisper` that takes in a sentence and returns a new sentence in all lowercase letters with 'shh...' at the beginning.",
			"The function should also remove an exclamation point at the end of the sentence, if there is one. ",
		],
		examples: [
			"Example input: 'The KITTENS are SLEEPING!'",
			"Example output: 'shh... the kittens are sleeping'",
		],
		tester: [
			"console.log(whisper('PLEASE STOP SHOUTING.'))",
			"console.log(whisper('MA'AM, this is a Wendy's!'))",
		],
		methods: ["endsWith", "slice", "if conditional"],
		explanations: [
			".pop()",
			"I tried pop method firts but the console gave me back Wendy's! instead without!",
			"I had a problem with .pop() and I needed to create a new variable to add the pop method because if not it gave me back the same str",
			".slice(0,-1)",
			"The exercise need to be done with .slice() method to be able to delete '!'",
		],

		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/whispering.js",
	},
	{
		id: 2,
		name: "Alternating Caps",
		descriptions: [
			" Write a function that takes in a string of letters and returns a sentence in which every other letter is capitalized.",
		],
		examples: [
			"Example input: 'I'm so happy it's Monday'",
			"Example output: 'I'M So hApPy iT'S MoNdAy'",
		],
		tester: [
			"console.log(alternatingCaps('When you visit Portland you have to go to VooDoo Donuts'));",
		],
		methods: ["", "", ""],
		explanations: ["", "", "", ""],

		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/alternatingCaps.js",
	},
	{
		id: 3,
		name: "toTitleCase",
		descriptions: [
			"Write a function that will capitalize every word in a sentence.",
			"Example Input: 'everything, everywhere, all at once'",
			"Example Output: 'Everything, Everywhere, All At Once'",
			"First, write a function that takes in one word and  capitalizes the first letter of that word.",
			"Example Input: 'scrimba'",
			"Example Output: 'Scrimba'",
			"function capitalizeWord(word){return;}",
			"Now write a function that capitalizes every word in a sentence. How can you reuse the function you just wrote?",
			"function toTitleCase(str){ }",
		],
		examples: [
			"Example Input: 'everything, everywhere, all at once'",
			"Example Output: 'Everything, Everywhere, All At Once'",
		],
		tester: [
			"console.log(capitalizeWord('pumpkin'));",
			"console.log(toTitleCase('pumpkin pranced purposefully across the pond'));",
		],
		methods: [
			"slice(' ')",
			".charAt(0)",
			".toUpperCase()",
			".slice(1)",
			".toLowerCase()",
			".join(' ')",
		],
		explanations: [
			"split(' '): m√©todo utilizado para dividir una cadena de caracteres en un string. ",
			"split(' '): dividir√° el str en palabras dentro de un array",
			"split(''): dividir√° el str en letras dentro de un array",
			".charAt(0) en JavaScript se utiliza para obtener el car√°cter en una posici√≥n espec√≠fica de una cadena de texto. En este caso, .charAt(0) obtiene el primer car√°cter de la cadena.",
			".charAt(0).toUpperCase(): para poner el primer elemento en mayusculas",
			".slice(1): para cortar desde despu√©s'es del elemneto primero",
			".slice(1).toLowerCase(): para poner mayusculas todos los elementos despu√©s del primero",
			".join(' ')",
		],
		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/toTitleCase.js",
	},
	{
		id: 4,
		name: "Definitely Not FizzBuzz Exercise, awardBonuses",
		descriptions: [
			"Scrimba CEO Per Borgen wants you to write a program to grant special bonuses to all his employees based on their employee ID numbers!",
			"Scrimba has 100 employees and their employee ID numbers range from 1 - 100. If the employee's ID number is: ",
			"Divisible by 3 - Vacation! ",
			"Divisible by 5 - $100,000 bonus! ",
			"Divisible by both 3 and 5 - JACKPOT! 1 Million and a Yacht!",
			"Not divisible by 3 or 5 - :(",
			"Write a program to loop through all the ID numbers and print their prize. ",
		],
		examples: [
			"Your function's output should look something like this: ",
			"1 - :(",
			"2 - :(",
			"3 - Vacation! ",
			"4 - :(",
			"5 - $100,000 bonus!",
		],
		tester: ["console.log(awardBonuses());"],
		methods: ["conditional", "", ""],
		explanations: ["", "", "", ""],
		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/awardBonuses.js",
	},
	{
		id: 5,
		name: "Emojify!",
		descriptions: [
			"1) First Part of the exercise",
			"Popular services like Slack and Github allow for emoji shortscodes, meaning they will detect when a word in a sentence begins and ends with a colon (:) and automatically replace that word with an emoji.",
			"These shortcodes allow users to add an emoji to their messages by typing a code rather than searching for an emoji from a list. ",
			"const emojis = {'smile': 'üòä','angry': üò†','party': 'üéâ','heart': 'üíú','cat': 'üê±','dog': 'üêï'}",
			"Write a function that checks if a lowercase word starts and ends with a colon. If it does, remove the colons and look up the word in the emoji object.",
			"If the word is in the emojis object, return the corresponding emoji.",
			"If it isn't, return the original word.",
			"function emojify(word){return;}",
			"2) Second Part of the exercise",
			"Write a function to find any emoji shortcodes in a phrase.",
			" Your function should map over each word in the phrase, emojify any word that begins and ends with a colon, then return the emojified phrase",
			" Feel free to use your emojify function from the previous exercise!",
			"function emojify(phrase){return;}",
		],
		examples: [
			"For example, typing :smile: will replace that text with üòä",
			"1) Examples First Part of the exercise",
			"Example input: ':party:'",
			"Example output: üéâ",
			"Example input: ':flower:",
			"Example output: 'flower'",
			"Example input: 'elephant'",
			"Example output: 'elephant'",
			"2) Examples Second Part of the exercise",
			"Example input: 'I :heart: my :cat:",
			"Example output: 'I üíú my üê±'",
			"Example input: 'I :heart: my elephant'",
			"Example output: 'I üíú my elephant'",
		],
		tester: [
			"To log to the console the firts Part of the exercise",
			"console.log(emojifyWord(':heart:'));",
			"console.log(emojifyWord(':flower:'));",
			"console.log(emojifyWord('elephant'));",
			"To display in the consol the second Part of the exercise",
			"console.log(emojifyPhrase('I :heart: my :cat:'));",
			"console.log(emojifyPhrase('I :heart: my :elephant:'));",
		],
		methods: [
			"toLowerCase()",
			".startsWith()",
			".slice()",
			".split()",
			"forEach()",
			".endWith()",
			"conditional",
			".join()",
			"Regular Expresion: const regex = new RegExp(`\\b(${Object.keys(emojis).join('|')})\\b`, 'g');",
			".replace(regex, (match) => emojis[match]);",
		],
		explanations: [
			"METHOD: .startsWith()",
			"verifica si una cadena comienza con los caracteres especificados, devolviendo true o false seg√∫n el caso.",
			"Sintaxis",
			"string.startsWith(searchString, position)",
			"Ejemplo:",
			"const str = 'Hello, world!;'",
			"console.log(str.startsWith('Hello')); // true",
			"console.log(str.startsWith('world')); // false",
			"console.log(str.startsWith('world', 7)); // true",
			"METHOD: .endsWith()",
			"verifica si una cadena termina con los caracteres especificados, devolviendo true o false seg√∫n el caso.",
			"Sintaxis",
			"string.endsWith(searchString, length)",
			"Ejemplo:",
			"const str = 'Hello, world!;'",
			"console.log(str.startsWith('Hello')); // true",
			"console.log(str.startsWith('world')); // false",
			"console.log(str.startsWith('world', 7)); // true",
			"",
		],
		github:
			"https://github.com/IsabelTizon/js-challenges/blob/main/src/app/scrimba/exercises/emojify.js",
	},
	{
		id: 6,
		name: "Is an anagram?",
		descriptions: [
			"Anagrams are groups of words that can be spelled with the same letters. For example, the letters in 'pea' can be rearrange to spell 'ape', and the letters in 'allergy' can be rearranged to spell 'gallery.'",
			"Write a function to check if two strings of lowercase letters are anagrams. Return true if the word is an anagram. Return false if it isn't. ",
			"function isAnagram(str1, str2){}",
		],
		examples: [
			"Example input: 'allergy', 'gallery'",
			"Example output: true",
			"Example input: 'rainbow', 'crossbow'",
			"Example output: false",
		],
		tester: [
			"console.log(isAnagram('allergy, 'gallery'));",
			"console.log(isAnagram('treasure', 'measure'));",
		],
		methods: ["", "", ""],
		explanations: ["", "", "", ""],
		github: "",
	},
	{
		id: 7,
		name: "",
		descriptions: [" "],
		examples: ["", ""],
		tester: [""],
		methods: ["", "", ""],
		explanations: ["", "", "", ""],
		github: "",
	},
	{
		id: 8,
		name: "",
		descriptions: [" "],
		examples: ["", ""],
		tester: [""],
		methods: ["", "", ""],
		explanations: ["", "", "", ""],
		github: "",
	},
];
